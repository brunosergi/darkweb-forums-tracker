{
  "name": "darkweb-get-forum-posts",
  "nodes": [
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"task_status\": {\n      \"type\": \"string\",\n      \"enum\": [\"success\", \"failed\"],\n      \"description\": \"Status of the forum parsing task\"\n    },\n    \"failed_cause\": {\n      \"type\": \"string\",\n      \"enum\": [\"login_needed\", \"bot_captcha\", \"page_unreachable\"],\n      \"description\": \"Reason for task failure (only present when task_status is 'failed')\"\n    },\n    \"error_details\": {\n      \"type\": \"string\",\n      \"description\": \"Additional details about the error (optional for failed tasks)\"\n    },\n    \"forum_posts\": {\n      \"type\": \"array\",\n      \"description\": \"Array of forum threads extracted from the forum page (only present when task_status is 'success')\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"post_title\": {\n            \"type\": \"string\",\n            \"description\": \"The title/subject of the forum thread as displayed on the forum, with pagination indicators removed\"\n          },\n          \"post_link\": {\n            \"type\": \"string\",\n            \"description\": \"Complete URL to the thread, constructed as base forum URL + thread path\"\n          },\n          \"post_author_name\": {\n            \"type\": \"string\",\n            \"description\": \"Username of the thread creator/original poster\"\n          },\n          \"post_author_link\": {\n            \"type\": \"string\",\n            \"description\": \"Profile URL of the thread author, constructed as base forum URL + '/User-' + username\"\n          },\n          \"last_post_date\": {\n            \"type\": \"string\",\n            \"description\": \"Last activity timestamp as text from forum (e.g., '2 minutes ago', '1 hour ago')\"\n          },\n          \"last_post_author\": {\n            \"type\": \"string\",\n            \"description\": \"Username of the last person to post/reply in the thread\"\n          },\n          \"last_post_author_link\": {\n            \"type\": \"string\",\n            \"description\": \"Profile URL of the last activity author, constructed as base forum URL + '/User-' + username\"\n          }\n        },\n        \"required\": [\n          \"post_title\",\n          \"post_link\", \n          \"post_author_name\",\n          \"post_author_link\",\n          \"last_post_date\",\n          \"last_post_author\",\n          \"last_post_author_link\"\n        ],\n        \"additionalProperties\": false\n      }\n    }\n  },\n  \"required\": [\"task_status\"],\n  \"if\": {\n    \"properties\": {\n      \"task_status\": {\n        \"const\": \"success\"\n      }\n    }\n  },\n  \"then\": {\n    \"required\": [\"forum_posts\"],\n    \"properties\": {\n      \"forum_posts\": {\n        \"minItems\": 0\n      }\n    },\n    \"not\": {\n      \"required\": [\"failed_cause\"]\n    }\n  },\n  \"else\": {\n    \"if\": {\n      \"properties\": {\n        \"task_status\": {\n          \"const\": \"failed\"\n        }\n      }\n    },\n    \"then\": {\n      \"required\": [\"failed_cause\"],\n      \"not\": {\n        \"required\": [\"forum_posts\"]\n      }\n    }\n  },\n  \"additionalProperties\": false\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        288,
        896
      ],
      "id": "27742a08-e3fe-45b5-b011-c02cd0574044",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "description": "=## Using the think tool\n\nBefore taking any action or responding after receiving tool results, use the think tool as a scratchpad to:\n- List the specific rules that apply to the current forum extraction request\n- Check if navigation and data access was successful\n- Verify that extracted data is real (not fake/example data)\n- Plan the correct response status based on actual results\n\nHere are examples of what to iterate over inside the think tool:\n\n<think_tool_example_1>\nForum page extraction request for DarkForums.st\n- Rules to verify:\n  * Must navigate to actual URL successfully\n  * Must capture real browser snapshot\n  * Must extract only real thread data from snapshot\n  * Never generate fake/example data\n- Status determination:\n  * If navigation failed ‚Üí \"page_unreachable\"\n  * If CAPTCHA/DDoS-Guard detected ‚Üí \"bot_captcha\"\n  * If login redirect ‚Üí \"login_needed\"\n  * If real data extracted ‚Üí \"success\" \n- Plan: Navigate ‚Üí snapshot ‚Üí verify real content ‚Üí extract real data only\n</think_tool_example_1>\n\n<think_tool_example_2>\nBrowser navigation completed, checking snapshot results\n- Navigation status: ‚úÖ Success - no timeouts or errors\n- Snapshot content analysis:\n  * Page shows: Real forum layout with thread listings\n  * Thread titles visible: \"Morocco PMMP Database\", \"Twitter Leak 200M\"\n  * Authors visible: \"B4baYega\", \"Lucifer\" \n  * Real dates: \"1 minute ago\", \"40 minutes ago\"\n- Data validation:\n  * All thread data comes from actual snapshot ‚úÖ\n  * No fake usernames like \"Username\" or \"Example\" ‚úÖ\n  * URLs are real forum paths ‚úÖ\n- Plan: Extract real data and return success status with actual forum posts\n</think_tool_example_2>\n\n<think_tool_example_3>\nBrowser navigation attempt results\n- Navigation status: ‚ùå Failed - connection timeout after 30s\n- Error details: \"net::ERR_TIMED_OUT\"\n- Snapshot result: No usable content captured\n- Data available: None - cannot extract anything\n- Rules check:\n  * Cannot generate fake data ‚úÖ\n  * Must report navigation failure ‚úÖ\n- Plan: Return failed status with \"page_unreachable\" and error details\n</think_tool_example_3>"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        576,
        896
      ],
      "id": "d3cec01e-08f7-4e30-a920-b48f578e05de",
      "name": "Think"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6aca17c5-a68f-4565-8bf8-45e9d3c14b63",
              "name": "keywords",
              "value": "=[\"twitter\",\"telegram\",\"brazil\",\"brasil\",\".com.br\",\"ssn\",\"crypto\",\"lockbit\"]",
              "type": "array"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        128
      ],
      "id": "768765bf-cf09-491e-a732-53b6e2108b14",
      "name": "Keywords"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/rpc/check_existing_forum_posts",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post_links_to_check\": {{ $json.output.forum_posts.map(post => post.post_link).toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1024,
        368
      ],
      "id": "0d88c854-ab25-4cd0-8d12-b98d14d7d919",
      "name": "Supabase RPC Check Existing URLs",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 5000,
      "credentials": {
        "supabaseApi": {
          "id": "lDEgB2aVZXWmx1nk",
          "name": "Supabase account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "post_link",
              "field2": "existing_post_link"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1344,
        128
      ],
      "id": "5297ad3f-29f4-4bba-8ebe-e281e593300d",
      "name": "Merge Only New URLs",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "forum_url_path",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        656,
        128
      ],
      "id": "422082ef-5a9b-4f4a-8768-ef40d1b602f7",
      "name": "Split Out URLs to Track"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {
          "username": "DarkWeb Forums",
          "wait": false
        },
        "embeds": {
          "values": [
            {
              "description": "=### {{ $json.forum_name }}\n- {{ $json.forum_url_path }}",
              "author": "=üîÑ Forum tracking started",
              "color": "#3498DB",
              "timestamp": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        336,
        368
      ],
      "id": "5474592b-0853-4034-8d86-7c3470614ff2",
      "name": "Inform Tracking Started",
      "webhookId": "7b0843fe-ee9e-45de-8198-74a6adc41eb2",
      "credentials": {
        "discordWebhookApi": {
          "id": "xqXcOV565MNG0nSM",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {
          "username": "DarkWeb Forums",
          "wait": true
        },
        "embeds": {
          "values": [
            {
              "description": "=### {{ $('Loop Over URLs').item.json.forum_name }}\n- {{ $('Loop Over URLs').item.json.forum_url_path }}\n> AI agent tried to obtain data, but an error occurred.\n> {{ (() => { try { return $json.output.error_details } catch(e) { try { return $json.error } catch(e) { return 'Unknown error occurred' } } })() }}\n`Check workflow logs ‚Ä¢ Manual review required`",
              "author": "=‚ö†Ô∏è Forum tracking failed",
              "color": "#E74C3C",
              "timestamp": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1024,
        880
      ],
      "id": "e66f2fd8-d801-43bd-bda0-13a12cc64d69",
      "name": "Inform Tracking Failed",
      "webhookId": "7b0843fe-ee9e-45de-8198-74a6adc41eb2",
      "executeOnce": true,
      "retryOnFail": false,
      "credentials": {
        "discordWebhookApi": {
          "id": "xqXcOV565MNG0nSM",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a6e494dc-8c00-4583-a950-510c65468f38",
              "leftValue": "={{ $json.forum_posts[0] }}",
              "rightValue": 0,
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1344,
        368
      ],
      "id": "2c91652b-c8c5-423d-8eef-8307fc18a853",
      "name": "Has New Posts?"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {
          "username": "DarkWeb Forums",
          "wait": true
        },
        "embeds": {
          "values": [
            {
              "description": "=### {{ $('Loop Over URLs').item.json.forum_name }}\n- {{ $('Loop Over URLs').item.json.forum_url_path }}",
              "author": "=‚õî No new posts found",
              "color": "#3498DB",
              "timestamp": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1344,
        624
      ],
      "id": "fb52156b-9f33-4428-8bb8-086ca3614da6",
      "name": "Inform No New Posts Found",
      "webhookId": "7b0843fe-ee9e-45de-8198-74a6adc41eb2",
      "executeOnce": true,
      "credentials": {
        "discordWebhookApi": {
          "id": "xqXcOV565MNG0nSM",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        80,
        128
      ],
      "id": "a73f1459-06d8-4857-a793-d280430524f7",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        112,
        896
      ],
      "id": "c71098c9-662e-4ff0-9505-53db866f6243",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "AWUhNNtLS5BaQvTz",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.task_status }}",
                    "rightValue": "success",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "305279dd-7b2b-471c-aba0-0c5fc195c520"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "success"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cd9e2a01-3870-4596-a50e-9288ac4fd972",
                    "leftValue": "={{ $json.output.task_status }}",
                    "rightValue": "failed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            }
          ]
        },
        "options": {
          "fallbackOutput": 1
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        656,
        368
      ],
      "id": "1a1fc261-4dea-450f-9f96-a68c755d9d79",
      "name": "Switch Agent Output",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        80,
        368
      ],
      "id": "8e965f31-f344-4b79-96c2-ddb99581deff",
      "name": "Loop Over URLs",
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.forum_posts",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1024,
        128
      ],
      "id": "3767ec8e-bec4-4fd6-8a5b-91bc11a3e09b",
      "name": "Split Out Forum Posts"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "forum_posts",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1648,
        128
      ],
      "id": "7441ea39-22ce-482d-a56e-5dd7bb8e64ff",
      "name": "Recompose New Posts Array"
    },
    {
      "parameters": {
        "tableId": "darkweb_forums",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "monitored_at",
              "fieldValue": "={{ $now.toISO() }}"
            },
            {
              "fieldId": "post_title",
              "fieldValue": "={{ $json.post.post_title }}"
            },
            {
              "fieldId": "post_link",
              "fieldValue": "={{ $json.post.post_link }}"
            },
            {
              "fieldId": "post_author_name",
              "fieldValue": "={{ $json.post.post_author_name }}"
            },
            {
              "fieldId": "post_author_link",
              "fieldValue": "={{ $json.post.post_author_link }}"
            },
            {
              "fieldId": "last_post_date",
              "fieldValue": "={{ $json.post.last_post_date }}"
            },
            {
              "fieldId": "last_post_author",
              "fieldValue": "={{ $json.post.last_post_author }}"
            },
            {
              "fieldId": "last_post_author_link",
              "fieldValue": "={{ $json.post.last_post_author_link }}"
            },
            {
              "fieldId": "forum_name",
              "fieldValue": "={{ $('Loop Over URLs').item.json.forum_name }}"
            },
            {
              "fieldId": "forum_url",
              "fieldValue": "={{ $('Loop Over URLs').item.json.forum_url_path }}"
            },
            {
              "fieldId": "keyword_alert",
              "fieldValue": "={{ $json.keywords.some(keyword => $json.post.post_title.toLowerCase().replaceSpecialChars().trim().includes(keyword)) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1920,
        368
      ],
      "id": "544f4aa2-5cb2-404b-adf9-a56e576fe335",
      "name": "Add Posts to Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "lDEgB2aVZXWmx1nk",
          "name": "Supabase account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a60ead9-cd31-4e48-b81c-71b347d84428",
              "name": "forum_name",
              "value": "DarkForums.st",
              "type": "string"
            },
            {
              "id": "dcdea795-8f21-4213-aa5f-0866bdc6f9e8",
              "name": "forum_icon",
              "value": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQCWBDE-GmAiY_vPK4mNsuaPC8-gpK7u7ZFf46RcYP2SBNH4i_UcHc35Uoggs4e3DjvPmw&usqp=CAU",
              "type": "string"
            },
            {
              "id": "b8c7e0f0-1936-4e51-82be-b0c577f42734",
              "name": "forum_url",
              "value": "https://darkforums.st",
              "type": "string"
            },
            {
              "id": "e084011b-ec05-4f17-bd25-d448a4ea3eb6",
              "name": "forum_url_path[0]",
              "value": "https://darkforums.st/Forum-Other-Leaks",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        336,
        128
      ],
      "id": "3afe1f20-6f62-488e-a20d-a2aee1f7d97f",
      "name": "DarkForums.st Metadata"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1920,
        880
      ],
      "id": "b7c1b69e-7baa-42f0-8ebd-de05f789666e",
      "name": "Wait",
      "webhookId": "34f815ed-1095-4ad1-8a61-18b42ca04db0"
    },
    {
      "parameters": {
        "fieldToSplitOut": "forum_posts",
        "options": {
          "destinationFieldName": "post"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1648,
        368
      ],
      "id": "c70cd20b-05a2-4afb-a307-64d08e32de56",
      "name": "Split Out Forum Posts Again"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "jcpIiCxbvrHkOY2L",
          "mode": "list",
          "cachedResultName": "darkweb-send-forum-posts-to-discord"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "forum_name": "={{ $json.forum_name }}",
            "forum_url_path": "={{ $json.forum_url }}",
            "keyword_alert": "={{ $json.keyword_alert }}",
            "forum_icon": "={{ $('Loop Over URLs').item.json.forum_icon }}",
            "post_id": "={{ $json.id }}",
            "post_title": "={{ $json.post_title }}",
            "post_link": "={{ $json.post_link }}",
            "post_author_name": "={{ $json.post_author_name }}",
            "post_author_link": "={{ $json.post_author_link }}",
            "last_post_date": "={{ $json.last_post_date }}",
            "last_post_author": "={{ $json.last_post_author }}",
            "last_post_author_link": "={{ $json.last_post_author_link }}",
            "screenshot_filename": "={{ $json.id }}-{{ $json.post_link.split('/').slice(3).join('/').replace(/[^a-zA-Z0-9-_]/g, '-') }}.jpeg"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "forum_name",
              "displayName": "forum_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "forum_url_path",
              "displayName": "forum_url_path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "forum_icon",
              "displayName": "forum_icon",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "post_id",
              "displayName": "post_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "post_title",
              "displayName": "post_title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "post_link",
              "displayName": "post_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "post_author_name",
              "displayName": "post_author_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "post_author_link",
              "displayName": "post_author_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "last_post_date",
              "displayName": "last_post_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "last_post_author",
              "displayName": "last_post_author",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "last_post_author_link",
              "displayName": "last_post_author_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "screenshot_filename",
              "displayName": "screenshot_filename",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "keyword_alert",
              "displayName": "keyword_alert",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1920,
        624
      ],
      "name": "Send Posts to Discord Feed",
      "id": "9b4f4d34-b3ef-43cc-8eff-c60de6475015",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Loop Over URLs').item.json.forum_url_path }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an AI agent responsible for parsing ARIA snapshot YAML data from a {{ $('Loop Over URLs').item.json.forum_name }} forum page using Playwright MCP tools. Your task is to extract structured information about forum threads and compile them into a JSON response with proper status handling.\n\n## IMPORTANT: OUTPUT STATUS HANDLING\n\nYour response MUST follow these status rules:\n\n### SUCCESS SCENARIO (task_status: \"success\")\n- When you successfully access the forum page and can extract thread data\n- Output format: `{\"task_status\": \"success\", \"forum_posts\": [...]}`\n- Include the forum_posts array even if it's empty (no threads found)\n- NEVER include \"failed_cause\" in success responses\n\n### FAILURE SCENARIOS (task_status: \"failed\")\n- When you cannot complete the task for any reason\n- Output format: `{\"task_status\": \"failed\", \"failed_cause\": \"reason\", \"error_details\": \"optional details\"}`\n- NEVER include \"forum_posts\" in failed responses\n- NEVER generate dummy/fake data\n\n**Failed Cause Options:**\n- `\"login_needed\"`: When the page requires authentication/login\n- `\"bot_captcha\"`: When blocked by anti-bot systems, CAPTCHA, or Cloudflare protection\n- `\"page_unreachable\"`: When page is offline, returns errors, times out, or is inaccessible\n\n---\n\n## EXTRACT REQUIRED DATA (Only for Success Cases)\n\n### Step 1: Navigate and Capture\n\n1. Use Think tool to plan your approach\n2. Use `browser_navigate` to go to the target URL\n3. Take `browser_snapshot` to capture the forum page content\n4. Analyze the response to determine if extraction is possible\n\n### Step 2: Status Determination\n\n**Check for these failure conditions FIRST:**\n- Login required page / authentication needed\n- Anti-bot protection / CAPTCHA / Cloudflare challenge\n- Page errors (404, 500, timeout, etc.)\n- Inaccessible content\n\n**If any failure condition is detected:**\n- Return immediately with appropriate failed status\n- Do NOT attempt to extract data\n- Do NOT generate fake/dummy data\n\n### Step 3: Parse Thread Data (Success Only)\n\n**Instructions for successful page access:**\n\n1. **Locate Thread Entries**:\n   - Look for `row` or `cell` entries within a `table` or `rowgroup` context.\n   - Thread titles typically appear under `link` tags with recognizable patterns like `Thread-...` in the `/url` or in context mentioning \"by\" an author.\n\n2. **Extract Fields for Each Thread**:\n   - **post_title**: The text content of the main `link` for the thread.\n   - **post_link**: The `{{ $('Loop Over URLs').item.json.forum_url }}` base concatenated with the `link` url path that contains `Thread-...` and does not include `?action=lastpost`.\n   - **post_author_name**: The text name near `by` or within a `link` where author info is mentioned.\n   - **post_author_link**: The `link` URL that contains `/User-<username>` for the post author.\n   - **last_post_date**: The date/time string found near `Last Post` link or nearby metadata.\n   - **last_post_author**: The name appearing as the latest replier in the `Last Post` section.\n   - **last_post_author_link**: The link containing `/User-<username>` for the last replier.\n\n3. **Filtering**:\n   - Ignore rows that are just forum headers or pagination controls.\n   - Ensure you skip `Announcement`-type rows unless they follow the same structure.\n\n4. **Output**:\n   - Return a well-formatted JSON with success status and forum_posts array.\n   - Ensure all URLs are absolute by prepending `{{ $('Loop Over URLs').item.json.forum_url }}` where necessary.\n\n### Example Success Output:\n\n```json\n{\n  \"task_status\": \"success\",\n  \"forum_posts\": [\n    {\n      \"post_title\": \"Example Leak\",\n      \"post_link\": \"{{ $('Loop Over URLs').item.json.forum_url }}/Thread-Example-Leak\",\n      \"post_author_name\": \"Username\",\n      \"post_author_link\": \"{{ $('Loop Over URLs').item.json.forum_url }}/User-Username\",\n      \"last_post_date\": \"28-06-25, 06:00 AM\",\n      \"last_post_author\": \"Replier\",\n      \"last_post_author_link\": \"{{ $('Loop Over URLs').item.json.forum_url }}/User-Replier\"\n    }\n  ]\n}\n```\n\n### Example Failure Outputs:\n\n```json\n{\n  \"task_status\": \"failed\",\n  \"failed_cause\": \"bot_captcha\",\n  \"error_details\": \"Cloudflare protection detected on page\"\n}\n```\n\n```json\n{\n  \"task_status\": \"failed\",\n  \"failed_cause\": \"login_needed\",\n  \"error_details\": \"Page redirected to login form\"\n}\n```\n\n```json\n{\n  \"task_status\": \"failed\",\n  \"failed_cause\": \"page_unreachable\",\n  \"error_details\": \"HTTP 503 Service Unavailable\"\n}\n```\n\n---\n\n## ANTI-BOT HANDLING\n\n### ONLY if the browser_snapshot shows anti-bot protection:\n\n- Use `browser_wait_for` with time: 10 to wait for automatic bypass\n- Take another `browser_snapshot` to check if forum loaded\n- If still blocked, return failed status with \"bot_captcha\" cause\n\n### ONLY if captcha verification appears:\n\n- Use `browser_hover` then `browser_click` on verification button\n- Use `browser_wait_for` with time: 5\n- Take final `browser_snapshot` for extraction\n- If verification fails, return failed status with \"bot_captcha\" cause\n\n## CRITICAL REMINDERS\n\n1. **NEVER generate fake/dummy data** - if you can't access real data, return failed status\n2. **Always determine status first** - check for failures before attempting extraction\n3. **Follow the JSON schema strictly** - success responses need forum_posts, failed responses need failed_cause\n4. **Be precise with failure causes** - use the correct enum value for the specific situation\n5. **No mixed responses** - never include both forum_posts and failed_cause in the same response",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        336,
        624
      ],
      "id": "96ffb691-02bc-4688-858c-d42b0d9edae9",
      "name": "AI Agent",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 5000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sseEndpoint": "http://host.docker.internal:8831/sse",
        "include": "except",
        "excludeTools": [
          "browser_file_upload",
          "browser_install",
          "browser_pdf_save",
          "browser_drag",
          "browser_generate_playwright_test"
        ]
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        720,
        896
      ],
      "id": "0992a016-aa4a-4909-b21c-8d6f6f3c3305",
      "name": "Playwright MCP"
    }
  ],
  "pinData": {},
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Keywords": {
      "main": [
        [
          {
            "node": "Add Posts to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase RPC Check Existing URLs": {
      "main": [
        [
          {
            "node": "Merge Only New URLs",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Inform Tracking Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Only New URLs": {
      "main": [
        [
          {
            "node": "Recompose New Posts Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out URLs to Track": {
      "main": [
        [
          {
            "node": "Loop Over URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inform Tracking Started": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inform Tracking Failed": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has New Posts?": {
      "main": [
        [
          {
            "node": "Split Out Forum Posts Again",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inform No New Posts Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inform No New Posts Found": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "DarkForums.st Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch Agent Output": {
      "main": [
        [
          {
            "node": "Supabase RPC Check Existing URLs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out Forum Posts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inform Tracking Failed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inform Tracking Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over URLs": {
      "main": [
        [],
        [
          {
            "node": "Inform Tracking Started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Forum Posts": {
      "main": [
        [
          {
            "node": "Merge Only New URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recompose New Posts Array": {
      "main": [
        [
          {
            "node": "Has New Posts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Posts to Supabase": {
      "main": [
        [
          {
            "node": "Send Posts to Discord Feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DarkForums.st Metadata": {
      "main": [
        [
          {
            "node": "Split Out URLs to Track",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Forum Posts Again": {
      "main": [
        [
          {
            "node": "Keywords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Posts to Discord Feed": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Switch Agent Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inform Tracking Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Playwright MCP": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5ee551cf-9ebe-4060-be6d-46e988add78c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "98e897a176d6aa8f9ebfef8f0306eab4fec5c697c6120f66479530a2b348cfea"
  },
  "id": "gKKmnWOclczwdwQp",
  "tags": []
}